#!/usr/bin/env python3
"""
Professional Lead Generation System for Reviu.pk
Flask web application with AI-powered business collection and email generation
"""

import os
import logging
from flask import Flask, render_template, request, jsonify, session
from dotenv import load_dotenv

# Import our modules
from business_collector import BusinessCollector
from email_generator import EmailGenerator
from email_sender import EmailSender
from data_manager import DataManager

# Import Gemini-powered modules
from gemini_business_generator import GeminiBusinessGenerator, BusinessData

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'reviu-pk-secret-key-2024')

# Initialize components
try:
    # Basic components (for fallback)
    collector = BusinessCollector()
    email_gen = EmailGenerator()
    email_sender = EmailSender()
    data_manager = DataManager()
    
    # Gemini-powered components
    gemini_generator = GeminiBusinessGenerator()
    
    logger.info("‚úÖ All components initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize components: {e}")
    raise

@app.route('/')
def index():
    """Main page with lead generation interface"""
    try:
        # Get available categories and cities
        categories = collector.get_categories()
        cities = collector.get_cities()
        
        # Get campaign statistics
        stats = data_manager.get_campaign_statistics()
        
        return render_template('index.html', 
                             categories=categories, 
                             cities=cities,
                             stats=stats)
    except Exception as e:
        logger.error(f"‚ùå Error rendering index: {e}")
        return render_template('error.html', error=str(e))

@app.route('/api/generate_leads', methods=['POST'])
def generate_leads():
    """Generate leads for selected category and city using AI-powered system"""
    try:
        data = request.get_json()
        category = data.get('category')
        city = data.get('city')
        target_count = int(data.get('target_count', 100))
        use_ai = data.get('use_ai', True)  # Default to AI-powered generation
        
        if not category or not city:
            return jsonify({
                'success': False,
                'message': 'Category and city are required'
            }), 400
        
        logger.info(f"üöÄ Generating {'AI-powered' if use_ai else 'basic'} leads for {category} in {city} (target: {target_count})")
        
        if use_ai:
            # Use Gemini-powered lead generation
            businesses = gemini_generator.generate_businesses(category, city, target_count)
            
            if not businesses:
                return jsonify({
                    'success': True,
                    'message': 'No businesses generated by Gemini AI. This might be due to API issues.',
                    'businesses': [],
                    'ai_insights': {
                        'high_priority': 0,
                        'medium_priority': 0,
                        'low_priority': 0,
                        'average_lead_score': 0.0
                    },
                    'statistics': {
                        'total_leads': 0,
                        'sources_used': ['Gemini AI'],
                        'generation_time': 0
                    }
                })
            
            # Save Gemini-generated businesses
            # Convert BusinessData objects to dictionaries
            businesses_dict = []
            for business in businesses:
                business_dict = {
                    'name': business.name,
                    'email': business.email,
                    'phone': business.phone,
                    'address': business.address,
                    'website': business.website,
                    'business_type': business.business_type,
                    'category': business.category,
                    'city': business.city,
                    'verified': business.verified,
                    'source': business.source,
                    'description': business.description,
                    'employees': business.employees,
                    'founded_year': business.founded_year,
                    'services': business.services
                }
                businesses_dict.append(business_dict)
            
            data_manager.save_leads(businesses_dict)
            
            # Get generation statistics
            stats = gemini_generator.get_generation_statistics()
            
            return jsonify({
                'success': True,
                'message': f'Successfully generated {len(businesses)} businesses using Gemini AI',
                'leads_count': len(businesses),
                'ai_insights': {
                    'high_priority': len([b for b in businesses if b.verified]),
                    'medium_priority': len([b for b in businesses if not b.verified and b.website != '']),
                    'low_priority': len([b for b in businesses if not b.verified and b.website == '']),
                    'average_lead_score': round(len([b for b in businesses if b.verified]) / len(businesses) * 100, 1),
                    'total_leads': len(businesses)
                },
                'generation_type': 'ai_powered'
            })
        else:
            # Use basic lead generation (fallback)
            businesses = collector.collect_businesses(category, city, target_count)
            
            if not businesses:
                return jsonify({
                    'success': True,
                    'message': 'No businesses found for the selected criteria. This might be due to network issues with scraping sources.',
                    'businesses': [],
                    'statistics': {
                        'total_leads': 0,
                        'sources_used': ['Basic Business Collector'],
                        'generation_time': 0
                    }
                })
            
            # Save basic leads
            # Convert BusinessData objects to dictionaries if needed
            businesses_dict = []
            for business in businesses:
                if hasattr(business, 'name'):  # Already a BusinessData object
                    business_dict = {
                        'name': business.name,
                        'email': business.email,
                        'phone': business.phone,
                        'address': business.address,
                        'website': business.website,
                        'business_type': business.business_type,
                        'category': business.category,
                        'city': business.city,
                        'verified': business.verified,
                        'source': business.source,
                        'description': getattr(business, 'description', ''),
                        'employees': getattr(business, 'employees', ''),
                        'founded_year': getattr(business, 'founded_year', ''),
                        'services': getattr(business, 'services', '')
                    }
                else:  # Already a dictionary
                    business_dict = business
                businesses_dict.append(business_dict)
            
            data_manager.save_leads(businesses_dict)
            
            # Get scraping statistics
            scraping_stats = collector.get_scraping_statistics()
            
            return jsonify({
                'success': True,
                'message': f'Successfully generated {len(businesses)} basic leads',
                'leads_count': len(businesses),
                'scraping_stats': scraping_stats,
                'generation_type': 'basic'
            })
        
    except Exception as e:
        logger.error(f"‚ùå Error generating leads: {e}")
        return jsonify({
            'success': False,
            'message': f'Error generating leads: {str(e)}'
        }), 500

@app.route('/api/generate_gemini_campaign', methods=['POST'])
def generate_gemini_campaign():
    """Generate email campaign using Gemini AI"""
    try:
        data = request.get_json()
        category = data.get('category')
        city = data.get('city')
        target_count = int(data.get('target_count', 50))
        
        if not category or not city:
            return jsonify({
                'success': False,
                'message': 'Category and city are required'
            }), 400
        
        logger.info(f"üéØ Generating Gemini-powered email campaign for {category} in {city}")
        
        # Generate businesses using Gemini
        businesses = gemini_generator.generate_businesses(category, city, target_count)
        
        if not businesses:
            return jsonify({
                'success': False,
                'message': 'No businesses generated for campaign'
            }), 500
        
        # Generate simple email templates
        email_templates = [
            {
                'subject': f'Professional {category} Services in {city}',
                'body': f'Dear Business Owner,\n\nWe specialize in {category} services in {city} and would love to discuss how we can help your business grow.\n\nBest regards,\nYour Team'
            },
            {
                'subject': f'{category} Solutions for {city} Businesses',
                'body': f'Hello,\n\nAre you looking for reliable {category} services in {city}? We have helped many businesses succeed.\n\nRegards,\nYour Team'
            }
        ]
        
        return jsonify({
            'success': True,
            'message': f'Successfully generated Gemini-powered campaign for {category} in {city}',
            'leads_count': len(businesses),
            'email_templates_count': len(email_templates),
            'email_templates': email_templates,
            'generation_type': 'gemini_ai'
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error generating Gemini campaign: {e}")
        return jsonify({
            'success': False,
            'message': f'Error generating Gemini campaign: {str(e)}'
        }), 500

@app.route('/api/get_gemini_insights', methods=['GET'])
def get_gemini_insights():
    """Get insights from Gemini-generated businesses"""
    try:
        # Load existing leads
        leads = data_manager.load_leads()
        
        if not leads:
            return jsonify({
                'success': True,
                'message': 'No leads found yet',
                'insights': {
                    'total_leads': 0,
                    'verified_leads': 0,
                    'categories': [],
                    'cities': [],
                    'generation_stats': {}
                }
            })
        
        # Analyze leads
        verified_leads = len([lead for lead in leads if lead.get('verified', False)])
        categories = list(set([lead.get('business_type', '') for lead in leads if lead.get('business_type')]))
        cities = list(set([lead.get('city', '') for lead in leads if lead.get('city')]))
        
        # Get Gemini generation statistics
        gemini_stats = gemini_generator.get_generation_statistics()
        
        insights = {
            'total_leads': len(leads),
            'verified_leads': verified_leads,
            'verification_rate': round(verified_leads / len(leads) * 100, 1) if leads else 0,
            'categories': categories,
            'cities': cities,
            'generation_stats': gemini_stats
        }
        
        return jsonify({
            'success': True,
            'message': 'Insights retrieved successfully',
            'insights': insights
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error getting Gemini insights: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting insights: {str(e)}'
        }), 500


@app.route('/api/generate_emails', methods=['POST'])
def generate_emails():
    """Generate personalized emails for collected leads"""
    try:
        # Load leads
        leads = data_manager.load_leads()
        
        if not leads:
            return jsonify({
                'success': False,
                'message': 'No leads found. Please generate leads first.'
            }), 404
        
        logger.info(f"üìß Generating emails for {len(leads)} leads")
        
        # Generate emails
        generated_emails = email_gen.generate_bulk_emails(leads)
        
        if not generated_emails:
            return jsonify({
                'success': False,
                'message': 'Failed to generate emails'
            }), 500
        
        # Save generated emails
        data_manager.save_generated_emails(generated_emails)
        
        return jsonify({
            'success': True,
            'message': f'Successfully generated {len(generated_emails)} emails',
            'emails_count': len(generated_emails)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error generating emails: {e}")
        return jsonify({
            'success': False,
            'message': f'Error generating emails: {str(e)}'
        }), 500

@app.route('/api/send_emails', methods=['POST'])
def send_emails():
    """Send generated emails to businesses"""
    try:
        # Load generated emails
        generated_emails = data_manager.load_emails()
        
        if not generated_emails:
            return jsonify({
                'success': False,
                'message': 'No generated emails found. Please generate emails first.'
            }), 404
        
        logger.info(f"üìß Sending {len(generated_emails)} emails")
        
        # Send emails
        results = email_sender.send_bulk_emails(generated_emails)
        
        if not results:
            return jsonify({
                'success': False,
                'message': 'Failed to send emails'
            }), 500
        
        # Save campaign results
        data_manager.save_campaign_results(results)
        
        # Calculate success rate
        success_count = sum(1 for r in results if r.get('status') == 'sent')
        success_rate = round((success_count / len(results)) * 100, 2)
        
        return jsonify({
            'success': True,
            'message': f'Email campaign completed. Success rate: {success_rate}%',
            'total_sent': len(results),
            'successful': success_count,
            'failed': len(results) - success_count,
            'success_rate': success_rate
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error sending emails: {e}")
        return jsonify({
            'success': False,
            'message': f'Error sending emails: {str(e)}'
        }), 500

@app.route('/api/get_leads')
def get_leads():
    """Get collected leads"""
    try:
        leads = data_manager.load_leads()
        return jsonify({
            'success': True,
            'leads': leads,
            'count': len(leads)
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting leads: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting leads: {str(e)}'
        }), 500

@app.route('/api/get_emails')
def get_emails():
    """Get generated emails"""
    try:
        emails = data_manager.load_emails()
        return jsonify({
            'success': True,
            'emails': emails,
            'count': len(emails)
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting emails: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting emails: {str(e)}'
        }), 500

@app.route('/api/get_results')
def get_results():
    """Get campaign results"""
    try:
        results = data_manager.load_results()
        return jsonify({
            'success': True,
            'results': results,
            'count': len(results)
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting results: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting results: {str(e)}'
        }), 500

@app.route('/api/get_statistics')
def get_statistics():
    """Get campaign statistics"""
    try:
        campaign_stats = data_manager.get_campaign_statistics()
        duplicate_analysis = data_manager.get_duplicate_analysis()
        scraping_stats = collector.get_scraping_statistics()
        
        return jsonify({
            'success': True,
            'campaign_stats': campaign_stats,
            'duplicate_analysis': duplicate_analysis,
            'scraping_stats': scraping_stats
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting statistics: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting statistics: {str(e)}'
        }), 500

@app.route('/api/test_connection')
def test_connection():
    """Test system connections"""
    try:
        results = {}
        
        # Test Gemini API
        try:
            gemini_test = email_gen.test_connection()
            results['gemini'] = {
                'status': 'success' if gemini_test else 'failed',
                'message': 'Gemini API connection successful' if gemini_test else 'Gemini API connection failed'
            }
        except Exception as e:
            results['gemini'] = {
                'status': 'error',
                'message': f'Gemini API error: {str(e)}'
            }
        
        # Test SMTP connection
        try:
            smtp_success, smtp_message = email_sender.test_connection()
            results['smtp'] = {
                'status': 'success' if smtp_success else 'failed',
                'message': smtp_message
            }
        except Exception as e:
            results['smtp'] = {
                'status': 'error',
                'message': f'SMTP error: {str(e)}'
            }
        
        # Test business collector
        try:
            categories = collector.get_categories()
            cities = collector.get_cities()
            results['business_collector'] = {
                'status': 'success',
                'message': f'Business collector ready with {len(categories)} categories and {len(cities)} cities'
            }
        except Exception as e:
            results['business_collector'] = {
                'status': 'error',
                'message': f'Business collector error: {str(e)}'
            }
        
        return jsonify({
            'success': True,
            'test_results': results
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error testing connections: {e}")
        return jsonify({
            'success': False,
            'message': f'Error testing connections: {str(e)}'
        }), 500

@app.route('/api/clear_session')
def clear_session():
    """Clear current session data"""
    try:
        data_manager.clear_session_data()
        return jsonify({
            'success': True,
            'message': 'Session data cleared successfully'
        })
    except Exception as e:
        logger.error(f"‚ùå Error clearing session: {e}")
        return jsonify({
            'success': False,
            'message': f'Error clearing session: {str(e)}'
        }), 500

@app.route('/api/get_categories')
def get_categories():
    """Get available business categories"""
    try:
        categories = collector.get_categories()
        return jsonify({
            'success': True,
            'categories': categories,
            'count': len(categories)
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting categories: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting categories: {str(e)}'
        }), 500

@app.route('/api/get_cities')
def get_cities():
    """Get available cities"""
    try:
        cities = collector.get_cities()
        return jsonify({
            'success': True,
            'cities': cities,
            'count': len(cities)
        })
    except Exception as e:
        logger.error(f"‚ùå Error getting cities: {e}")
        return jsonify({
            'success': False,
            'message': f'Error getting cities: {str(e)}'
        }), 500

if __name__ == '__main__':
    try:
        logger.info("üöÄ Starting Reviu.pk Lead Generation System...")
        app.run(debug=True, host='0.0.0.0', port=5000)
    except Exception as e:
        logger.error(f"‚ùå Failed to start application: {e}")
        raise
